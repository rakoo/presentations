Intro to go

Matthieu Rakotojaona

* Attribution

Based on these talks:

Go for Javaïstes
.link https://talks.golang.org/2014/go4java.slide

Programming in Go (bgmerrell on github)
.link https://talks.godoc.org/github.com/bgmerrell/presentations/programming-in-go.slide

Intro to Go (bgmerrell on github)
.link https://talks.godoc.org/github.com/bgmerrell/presentations/intro-to-go.slide

Introduction to Go (fzerorubigd on github)
.link https://talks.godoc.org/github.com/fzerorubigd/golang-slides/ubuntu.slide

* What is Go?

Go is an open-source programming language

- created at Google,
- to solve Google-scale problems.

.image pres/gopher.jpg 450 800

* Who uses Go?

Google:

- YouTube Vitess (no gophers, no kittens!)
- [[https://talks.golang.org/2013/oscon-dl.slide#1][dl.google.com]]

* Who uses Go? (cont'd)

.image pres/companies-using-go-2015.jpg 361 677

+ Mozilla, Cloudflare, Dropbox, BBC

[[https://golang.org/wiki/GoUsers][golang.org/wiki/GoUsers]]

* Why Go?

* Origins of Go

Rob Pike (UTF8, Plan9), Robert Griesemer (Hotspot VM), Ken Thompson (B, UNIX) in 2007, others later

Legend says Go was designed while waiting for a C++ program to compile.

In reality, Go was a response to the many of the frustrations they experienced with the languages in use at Google at that time; C++, Java, and Python.

Rob Pike's 2012 paper, [[https://talks.golang.org/2012/splash.article][Go at Google]] explains it: Go is not just a language.
Go is meant for the 21st century scales: tens of millions of code updated daily by hundreds or thousands of programmers building and running on zillions of machines

These constraints helped limit the features of the language

* Simplicity

Minimal design

.image pres/perfection.jpg

* Consistency

Orthogonal features

.image pres/lego.jpg

* Readability

“The ratio of time spent reading (code) versus writing is well over 10 to 1 ... (therefore) making it easy to read makes it easier to write.”
― Robert C. Martin

* Safety

Type safety, no buffer overflows, no pointer arithmetic.

.image pres/gopher.png 500 500

* Built-in concurrency features

.image pres/conc.jpg _ 1000

* Speed

.image pres/fast.jpg 500 _

* Stability

_It_is_intended_that_programs_written_to_the_Go_1_specification_will_continue_to_compile_and_run_correctly,_unchanged,_over_the_lifetime_of_that_specification_

- Pro: Your code you write today will continue to work with newer versions of Go. Go Team assert this on every commit.
- Con: The bar for adding a new feature is now insurmountably high.

* Let's dive in

* Go and Java common aspects

Go and Java are

- object oriented

- garbage collected

- statically typed

- part of the C family

* Object oriented flavors

Go is Object Oriented, but doesn't have the keywords:

- `class`,
- `extends`, or
- `implements`.

* All types are created equal

* Go types

- primitive types

	int, uint, int8, uint8, ...
	bool, string
	float32, float64
	complex64, complex128

- structs

	struct {
		Name string
		Age  int
	}

- slices and arrays
	
	[]int, [3]string, []struct{ Name string }

- maps

	map[string]int

* Kinds of types (continued)

- pointers

	*int, *Person

- functions

	func(int, int) int

- channels

	chan bool

- interfaces

	interface {
		Start()
		Stop()
	}

* Type declarations

	type [name] [specification]

`Person` is a `struct` type.

	type Person struct {
		name string
		age  int
	}

`Celsius` is a `float64` type.

	type Celsius float64

* Function declarations

	func [name] ([params]) [return value]
	func [name] ([params]) ([return values])

A sum function:

	func sum(a int, b int) int {
		return a + b
	}

A function with multiple returned values:

	func div(a, b int) (int, int)
		return a / b, a % b
	}

Made clearer by naming the return values:

	func div(den, div int) (q, rem int)
		return a / b, a % b
	}

* Functions are data, too

From the standard library:

    func HandleFunc(pattern string, handler func(ResponseWriter, *Request))

`handler` is a function over two params that is passed to `HandleFunc`

* Method declarations

	func ([receiver]) [name] ([param]*) ([return]*)

A method on a struct:

	func (p Person) Major() bool {
		return p.age >= 18
	}

But also a method on a `float64`:

	func (c Celsius) Freezing() bool {
		return c <= 0
	}

_Constraint:_ Methods can be defined *only* on types declared in the same package.

	// This won't compile
	func (s string) Length() int { return len(s) }

* Wait, pointers?

Use `&` to obtain the address of a variable.

	a := "hello"
	p := &a

Use `*` to dereference the pointer.

	fmt.Print(*p + ", world")

No pointer arithmetic, no pointers to unsafe memory.

	a := "hello"
	p := &a

	p += 4  // no, you can't

* Why pointers?

Control what you pass to functions.

- passing values, no side-effects:

	func double(x int) {
		x *= 2
	}

- passing pointers: side-effects possible:

	func double(x *int) {
		*x *= 2
	}

Control your memory layout.

- compare []Person and []*Person

* Method declarations on pointers

Receivers behave like any other argument.

Pointers allow modifying the pointed receiver:

	func (p *Person) IncAge() {
		p.age++
	}

The method receiver is a copy of a pointer (pointing to the same address).

Method calls on nil receivers are perfectly valid (and useful!).

	func (p *Person) Name() string {
		if p == nil {
			return "anonymous"
		}
		return p.name
	}

* Looping, traditional

    sum := 0
    for i := 0; i < MAX; i++ {
        sum += i
    }
    fmt.Println(sum)

* Looping, simplified

    for sum < 2000 {
        sum += sum
    }
    fmt.Println(sum)

* while is just a for, really

    i := 0
    for {
        i += 1
        break // Would be infinite loop if not for me!
    }
    fmt.Println(i)

* If/else

.play pres/if-else.go

* Switch

.play pres/switch.go

* Switch with no condition

.play pres/switch-no-condition.go

* Interfaces

* Interfaces

An interface is a set of methods.

In Java:

	interface Switch {
		void open();
		void close();
	}

In Go:

	type OpenCloser interface {
		Open()
		Close()
	}

* It's all about satisfaction

Java interfaces are satisfied *explicitly*.

Go interfaces are satisfied *implicitly*.

.image https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Rolling_Stones_09.jpg/512px-Rolling_Stones_09.jpg _ 512

Picture by Gorupdebesanez [[https://creativecommons.org/licenses/by-sa/3.0][CC-BY-SA-3.0]], via [[https://commons.wikimedia.org/wiki/File%3ARolling_Stones_09.jpg][Wikimedia Commons]]

* Go: implicit satisfaction

_If_a_type_defines_all_the_methods_of_an_interface,_the_type_satisfies_that_interface._

Benefits:

- fewer dependencies
- no type hierarchy
- organic composition

* Structural subtyping

Think static duck typing, verified at compile time.

.image pres/duck.jpg 500 500

* Interfaces

.code pres/interfaces.go /START animals OMIT/,/END animals OMIT/

.play pres/interfaces.go /START main OMIT/,/END main OMIT/

* Real World Interfaces (go/src/sort/sort.go)

.code pres/interfaces-sort.go

* Real World Interfaces (continued)

.play pres/interfaces-sort2.go /START OMIT/,/END OMIT/

* Packages

- Packages define boundaries for compilation and reuse.
- Packages are directories containing source code.
- The unit of compilation is the package, not the file.
- You import a whole package, not a type, or a symbol.

Packages you import are referenced by their package's prefix.

	import "fmt"

	func main() {
		fmt.Printf("Hello %s\n", "world)
	}

Import cycles are not permitted.

* Inheritance vs composition

* Inheritance vs composition

Lots of articles have been written about the topic.

In general, composition is preferred to inheritance.

Lets see why.

* Runner

.code pres/BadInheritance.java /START_RUNNER/,/END_RUNNER/

* RunCounter is-a Runner that counts

.code pres/BadInheritance.java /START_COUNTING/,/END_COUNTING/

* Let's run and count

What will this code print?

.code pres/BadInheritance.java /START_MAIN/,/END_MAIN/

Of course, this prints:

	running one
	running two
	running three
	my runner ran 6 tasks

Wait! How many?

* My runner ran 6 tasks? Six?

Inheritance causes:

- weak encapsulation,
- tight coupling,
- surprising bugs.

.image pres/badinheritance.png

* Solution: use composition

.code pres/Composition.java /START_COUNTING/,/BREAK_COUNTING/

* Solution: use composition (continued)

.code pres/Composition.java /BREAK_COUNTING/,/END_COUNTING/

* Solution: use composition (continued)

*Pros*

- The bug is gone!
- `Runner` is completely independent of `RunCounter`.
- The creation of the `Runner` can be delayed until (and if) needed.

*Cons*

- We need to explicitly define the `Runner` methods on `RunCounter`:

	public String getName() { return runner.getName(); }

- This can cause lots of repetition, and eventually bugs.

* There's no inheritance in Go

* There's no inheritance in Go

Let's use composition directly:

# .code pres/runner.go /type Task/,/END_TASK/

.code pres/runner.go /type Runner/,/END_RUNNER/

All very similar to the Java version.

* RunCounter

`RunCounter` has a `Runner` field.

.code pres/runner.go /type RunCounter/,

* Composition in Go

Same pros and cons as the composition version in Java.

We also have the boilerplate to proxy methods from `Runner`.

.code pres/runner.go /runner.Name/

But we can remove it!

* Struct embedding

Expressed in Go as unnamed fields in a struct.

It is still *composition*.

The fields and methods of the embedded type are defined on the embedding type.

Similar to inheritance, but the embedded type doesn't know it's embedded.

* Example of struct embedding

Given a type `Person`:

.code pres/embedsample.go /Person/,/Hi/

We can define a type `Employee` embedding `Person`:

.code pres/embedsample.go /Employee/,/}/

All fields and methods from `Person` are available on `Employee`:

.code pres/embedsample.go /var/,/Introduce/

* Struct embedding

.code pres/embed.go /type RunCounter2/,

* Is struct embedding like inheritance?

No, it is better!

It is composition.

- You can't reach into another type and change the way it works.

- Method dispatching is explicit.

It is more general.

- Struct embedding of interfaces.

* Is struct embedding like inheritance?

Struct embedding is selective.

.code pres/writecounter.go /WriteCounter/,/MAIN/

WriteCounter can be used with any io.ReadWriteCloser.

.play pres/writecounter.go /func main/,/^}/

* Easy mocking

What if we wanted to fake a part of a `net.Conn`?

	type Conn interface {
	        Read(b []byte) (n int, err error)
	        Write(b []byte) (n int, err error)
	        Close() error
	        LocalAddr() Addr
	        RemoteAddr() Addr
	        SetDeadline(t time.Time) error
	        SetReadDeadline(t time.Time) error
	        SetWriteDeadline(t time.Time) error
	}

I want to test `handleCon`:

.code pres/loopback.go /handleCon/

- We could create a `fakeConn` and define all the methods of `Conn` on it.

- But that's a lot of boring code.

* Struct embedding of interfaces

_WARNING_:_Cool_stuff_

If a type T has an embedded field of a type E, all the methods of E will be defined on T.

Therefore, if E is an interface T satisfies E.

* Struct embedding of interfaces (continued)

We can test `handleCon` with the `loopBack` type.

.code pres/loopback.go /loopBack/,/^}/

Any calls to the methods of `net.Conn` will fail, since the field is nil.

We redefine the operations we support:

.code pres/loopback.go /Read/,

* Concurrency

* Concurrency

It is part of the language, not a library.

Based on two concepts:

- goroutines: lightweight threads
- channels: typed pipes used to communicate and synchronize between goroutines

So cheap you can use them whenever you want.

.image pres/funnelin.jpg 300 700

* Goroutines

- The _go_ statement launches a function call as a goroutine
	go f()
	go f(x, y, ...)

- A goroutine runs concurrently (but not necessarily in parallel)
- A goroutine is a thread of control within the program, with its own local variables and stack. Much cheaper to create and schedule than operating system threads.


* A simple example

.code pres/concurrency1.go /f START/,/f END/

Function f is launched as 3 different goroutines, all running concurrently:

.play pres/concurrency1.go /main START/,/main END/

* Channels

A channel type specifies a channel value type (and possibly a communication direction):

	chan int
	chan<- string  // send-only channel
	<-chan T       // receive-only channel

A channel is a variable of channel type:

	var ch chan int
	ch := make(chan int)  // declare and initialize with newly made channel

A channel permits _sending_ and _receiving_ values:

	ch <- 1   // send value 1 on channel ch
	x = <-ch  // receive a value from channel ch (and assign to x)

Channel operations synchronize the communicating goroutines.

* Channels examples

.play pres/concurrency-for-with-select.go

* Channels and Goroutines

.play pres/channels.go /func repeat/,/^}/

* Channels and Goroutines cont'd

.play pres/channels.go /func main/,/^}/

* Concurrency is very powerful

And there's lots to learn!

- [[https://talks.golang.org/2012/concurrency.slide#1][Go Concurrency Patterns]], by Rob Pike
- [[https://talks.golang.org/2013/advconc.slide#1][Advanced Concurrency Patterns]], by Sameer Ajmani
- [[https://talks.golang.org/2012/waza.slide#1][Concurrency is not Parellelism]], by Rob Pike

.image pres/busy.jpg

* Language implementation

* Small, well polished standard library

- Support for networking, HTTP, TLS, RPC.
- Support for common encodings, XML, JSON, MIME
- Support for compression, tar, etc.
- Support for crypto.
- Support for images.
- Support for databases.
- Support for txt or html templating.

Try stdlib first, if nothing found go for an external library

.link https://golang.org/pkg/

* Excellent cross platform support

- Windows, OS X, Linux, {Free,Open,Net,DragonFly}BSD, Solaris
- NaCl, Google's Native Client runtime
- Experimental support for writing some class of Android application in Go 1.4
- arm, powerpc, x86 (32 and 64 bits)
- multiple implementations of the same spec makes sure the spec is correct

* Great tooling

gofmt

go get

go build [-race] ([[https://golang.org/doc/articles/race_detector.html]])

go test [-cover] ([[https://blog.golang.org/cover]])

go test [-bench] ([[https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go]])

go vet

godoc

cpuprofile / memprofile ([[https://blog.golang.org/profiling-go-programs]])

* Great documentation

[[https://golang.org/pkg/net/http]]

* Go does not have...

Classes

Exceptions

Assertions

Templates / generics

Operator overloading

Function overloading

Optional function parameters

Macros

Implicit type conversions

Many abstractions you might be used to, e.g: a set type, an ordered map, generators, decorators, iterators, function to delete array indexes etc.

* Where can I use Go in the technology stack?

.image pres/go-spectrum.gif 561 977

* Today's Language Landscape

- Following graphs taken from Brad Fitzpatrick's GoCon Tokyo talk: "Go: 90% Perfect, 100% of the time."
- Subjective
- There's always trade-offs to consider

* Fast & Fun

.image pres/funfast.svg

* Concurrency

.image pres/concurrency.svg

* Why I like it

Go is simple. It doesn't get in the way, just lets me do what I want to do, and does it fast.

See [[https://commandcenter.blogspot.fr/2012/06/less-is-exponentially-more.html][Less is exponentially more]]

* In conclusion

Go is simple, consistent, readable, and fun.

Implicit interfaces for reduced coupling and higher testability

Use composition instead of inheritance

- Struct embedding to remove boilerplate.
- Struct embedding of interfaces to satisfy them fast.

Concurrency is awesome, and you should check it out.

* What to do next?

Learn Go on your browser with [[https://tour.golang.org][tour.golang.org]]

Play with it at [[https://play.golang.org][play.golang.org]]

Learn how to write effective Go at [[https://golang.org/doc/effective_go.html][Effective Go]]

Find more about Go on [[https://golang.org][golang.org]]

Join the community at [[https://groups.google.com/forum/#!forum/Golang-nuts][golang-nuts]]
